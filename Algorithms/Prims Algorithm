Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges. Find and print the Minimum Spanning Tree (MST) using Prim's algorithm.
For printing MST follow the steps - 1.
In one line, print an edge which is part of MST in the format - v1 v2 w where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1 <= v2 i.e.
print the smaller vertex first while printing an edge. 2.Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.

Input Format

Line 1: Two Integers V and E (separated by space) Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)

Constraints

2 <= V, E <= 10^5 1 <= Wi <= 10^5 Time Limit: 1 sec

Output Format

Print the MST, as described in the task.

Sample Input 0

4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 0

0 1 3
1 2 1
0 3 5

import java.io.*;
import java.util.*;

public class Solution {
    public static void prims(int mat[][],int v){
        boolean visited[]=new boolean[v];
        visited[0]=true;
        for(int i=0;i<v-1;i++){
            int x=0;
            int y=0;
            int min=Integer.MAX_VALUE;
            for(int sv=0;sv<v;sv++){
                if(visited[sv]==true){
                    for(int ev=0;ev<v;ev++){
                        if(mat[sv][ev]!=0 && visited[ev]==false){
                            if(mat[sv][ev]<min){
                                min=mat[sv][ev];
                                x=sv;
                                y=ev;
                            }
                        }
                    }
                }
            }
            System.out.println(x+" "+y+" "+min);
            visited[y]=true;
        }
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int v=sc.nextInt();
        int e=sc.nextInt();
        int mat[][]=new int[v][v];
        for(int i=0;i<e;i++){
            int sv=sc.nextInt();
            int ev=sc.nextInt();
            int w=sc.nextInt();
            mat[sv][ev]=w;
            mat[ev][sv]=w;
        }
        prims(mat,v);
    }
}
