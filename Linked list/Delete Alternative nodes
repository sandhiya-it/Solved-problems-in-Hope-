Given a Singly Linked List of integers, delete all the alternate nodes in the list.
Example: List: 10 -> 20 -> 30 -> 40 -> 50 -> 60 -> null 
Alternate nodes will be: 20, 40, and 60. Hence after deleting, the list will be: Output: 10 -> 30 -> 50 -> null

Input Format
The first and the only line of input will contain the elements of the Singly Linked List separated by a single space and terminated by -1.

Constraints
1 <= N <= 10 ^ 6. Where N is the size of the Singly Linked List Time Limit: 1 sec

Output Format
The only line of output will contain the updated list elements.

Sample Input 0
10 20 30 40 50 60 70 -1

Sample Output 0
10 30 50 70 


import java.io.*;
import java.util.*;
class node{
    int data;
    node next;
    node(int d){
        data=d;
        next=null;
    }
}
class ll{
    node head=null;
    node prev=null;
    void ins(int val){
        node nn=new node(val);
        if(head==null){
            head=nn;
            prev=nn;
        }
        else{
            prev.next=nn;
            prev=nn;
        }
    }
    void deletealternative(){
        node current=head;
        while(current!=null && current.next!=null){
            current.next=current.next.next;
            current=current.next;
        }
    }
    void display(){
        node temp=head;
        while(temp!=null){
            System.out.print(temp.data+" ");
            temp=temp.next;
        }
    }
}
public class Solution {
    public static void main(String[] args) {
        Scanner z=new Scanner(System.in);
        ll l=new ll();
        while(z.hasNextInt()){
            int d=z.nextInt();
            l.ins(d);
        }
        l.deletealternative();
        l.display();
    }
}
