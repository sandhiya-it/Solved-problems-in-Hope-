For a given Binary Tree of type integer, print all the nodes without any siblings.

Input Format

The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.

Constraints

1 <= N <= 10^5 Where N is the total number of nodes in the binary tree. Time Limit: 1 second

Output Format

The only line of output prints the node data in a top to down fashion with reference to the root. Node data in the right subtree will be printed first and then the left subtree. A single space will separate them all.

Sample Input 0

5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1

Sample Output 0

9

import java.io.*;
import java.util.*;
class node{
    int data;
    node left;
    node right;
    node(int d){
        data=d;
    }
}
public class Solution {
    public static void siblings(node root){
        if(root==null){
            return;
        }
        if(root.left!=null && root.right==null){
            System.out.print(root.left.data+" ");
        }
        if(root.left==null && root.right!=null){
            System.out.print(root.right.data+" ");
        }
        siblings(root.right);
        siblings(root.left);
    }
    public static void main(String[] args) {
        Scanner z=new Scanner(System.in);
        Queue<node> q=new LinkedList<>();
        int val=z.nextInt();
        node nn=new node(val);
        node root=nn;
        q.add(nn);
        while(!q.isEmpty()){
            node popelement=q.poll();
            val=z.nextInt();
            if(val!=-1){
                nn=new node(val);
                popelement.left=nn;
                q.add(nn);
            }
            val=z.nextInt();
            if(val!=-1){
                nn=new node(val);
                popelement.right=nn;
                q.add(nn);
            }
        }
        siblings(root);
        
    }
}
